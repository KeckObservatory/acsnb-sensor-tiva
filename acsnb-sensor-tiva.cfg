/*
 * Copyright (c) 2015, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== empty.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
/*
 *  Program.stack is ignored with IAR. Use the project options in
 *  IAR Embedded Workbench to alter the system stack size.
 */
if (!Program.build.target.$name.match(/iar/)) {
    /*
     *  Reducing the system stack size (used by ISRs and Swis) to reduce
     *  RAM usage.
     */
    Program.stack = 0x300;
}

/* ================ System configuration ================ */

var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = SysMin;

/* Enable Semihosting for GNU targets to print to CCS console */
if (Program.build.target.$name.match(/gnu/)) {
    var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
}

/* ================ Logging configuration ================ */
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');

/* ================ Kernel configuration ================ */
/* Use Custom library */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = true;
BIOS.assertsEnabled = true;
/* Runtime stack checking is performed */
Task.checkStackFlag = true;
Hwi.checkStackFlag = true;

/* Reduce the number of task priorities */
Task.numPriorities = 4;

/* ================ Task configuration ================ */
/* Create task with priority 2 */
var task0Params = new Task.Params();
task0Params.instance.name = "getI2C0";
task0Params.stackSize = 1024;
task0Params.priority = 2;
Program.global.task = Task.create("&taskI2C0", task0Params);

var task1Params = new Task.Params();
task1Params.instance.name = "getI2C1";
task1Params.stackSize = 1024;
task1Params.priority = 2;
Program.global.task = Task.create("&taskI2C1", task1Params);

var task2Params = new Task.Params();
task2Params.instance.name = "getI2C2";
task2Params.stackSize = 1024;
task2Params.priority = 2;
Program.global.task = Task.create("&taskI2C2", task2Params);

var task3Params = new Task.Params();
task3Params.instance.name = "getI2C3";
task3Params.stackSize = 1024;
task3Params.priority = 2;
Program.global.task = Task.create("&taskI2C3", task3Params);

var task4Params = new Task.Params();
task4Params.instance.name = "getI2C4";
task4Params.stackSize = 1024;
task4Params.priority = 2;
Program.global.task = Task.create("&taskI2C4", task4Params);

var task5Params = new Task.Params();
task5Params.instance.name = "getI2C5";
task5Params.stackSize = 1024;
task5Params.priority = 2;
Program.global.task = Task.create("&taskI2C5", task5Params);

/*var task1Params = new Task.Params();
task1Params.instance.name = "slowSPITask";
task1Params.arg0 = 500;
task1Params.stackSize = 1024;*/
//Program.global.slowSPITask = Task.create("&slowSPITaskFxn", task1Params);


/* Create task with priority 1 */
var slaveTaskParams = new Task.Params();
slaveTaskParams.instance.name = "slaveTask";
slaveTaskParams.arg0 = 1;
slaveTaskParams.priority = 1;
slaveTaskParams.stackSize = 768;
Program.global.slaveTask = Task.create("&slaveTaskFxn", slaveTaskParams);

/* ================ Hwi configuration ================ */
/*
 * All Hwis for TM4C123GH6PM must be created statically; including Hwis for TI-RTOS
 * drivers
 */
//hwiParams = new Hwi.Params();
//hwiParams.instance.name = "sens0cvtDoneItr";

// isr vector see http://www.ti.com/lit/ds/spms378e/spms378e.pdf page 105
// 18 for GPIO port C
//Program.global.hwi0 = Hwi.create(19, "&sens0cvtDoneItr", hwiParams);



/* ================ TI-RTOS middleware configuration ================ */
var mwConfig = xdc.useModule('ti.mw.Config');
/*
* Include TI-RTOS middleware libraries
*/



/* ================ TI-RTOS drivers' configuration ================ */
var driversConfig = xdc.useModule('ti.drivers.Config');
/*
* Include TI-RTOS drivers
*
* Pick one:
* - driversConfig.LibType_NonInstrumented (default)
* Use TI-RTOS drivers library optimized for footprint and performance
* without asserts or logs.
* - driversConfig.LibType_Instrumented
* Use TI-RTOS drivers library for debugging with asserts and logs enabled.
*/
driversConfig.libType = driversConfig.LibType_NonInstrumented;
//driversConfig.libType = driversConfig.LibType_Instrumented;



/* ================ Driver configuration ================ */
//var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
//TIRTOS.useGPIO = true;
//TIRTOS.useI2C = true;

System.extendedFormats = "%$L%$S%$F%f";
